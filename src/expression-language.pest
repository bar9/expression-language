// example from the pest intro at https://pest.rs/book/intro.html (calculator)
// obviously this is not expression language yet, but there is much similarity

//TODO: Remove the unary operators and extend to PHP scalar values (ints, floats, strings, chars?)
num = @{ int ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ int)? }
    int = { ("+" | "-")? ~ ASCII_DIGIT+ }

unaryOperator = _{ not | minus | plus }

//TODO: Missing unary operator precedence. "not" comes before point operators, Plus and Minus before pow
not = { "not" | "!" }
minus = { "-" }
plus = { "+" }

binaryOperator = _{
    add | subtract | multiply | divide | modulus | pow
    | bitwiseAnd | bitwiseOr | bitwiseXor
    | eq | identical | neq | notIdentical
    | lt | gt | lte | gte | matches
    | and | or
    | concat
    | isIn | notIn
    | range
}

add          = { "+" }
subtract     = { "-" }
multiply     = { "*" }
divide       = { "/" }
modulus      = { "%" }
pow          = { "**" }
bitwiseAnd   = { "&" }
bitwiseOr    = { "|" }
bitwiseXor   = { "^" }
eq           = { "==" }
identical    = { "===" }
neq          = { "!=" }
notIdentical = { "!==" }
lt           = { "<" }
gt           = { ">" }
lte          = { "<=" }
gte          = { ">=" }
matches      = { "matches" }
and          = { "and" | "&&" }
or           = { "or" | "||" }
concat       = { "~" }
isIn         = { "in" }
notIn        = { "notIn" }
range        = { ".." }

expr = { term ~ (binaryOperator ~ term)* }
term = _{ (unaryOperator)? ~ (num | "(" ~ expr ~ ")") }

calculation = _{ SOI ~ expr ~ EOI }

WHITESPACE = _{ " " | "\t" }


